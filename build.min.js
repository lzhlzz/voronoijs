function import$(t,n){var i={}.hasOwnProperty;for(var r in n)i.call(n,r)&&(t[r]=n[r]);return t}function in$(t,n){for(var i=-1,r=n.length>>>0;++i<r;)if(t===n[i])return!0;return!1}Voronoi.Convex=function(t,n){function i(t){return l.center[t]=[0,1,2,3].reduce(function(n,i){return n+l.pts[u[i]][t]},0)/4}function r(t){return t.map(function(t){return u[t]})}function e(t){return t.trivial}function s(t,n){var i;return i=Aux.sub(l.center,l.pts[t]),["x","y","z"].reduce(function(t,n){return t+Math.pow(i[n],2)},0),[i,n]}function o(t,n){return t[0]-n[0]}var h,u,f,c,a,p,d,l=this;if(this.pts=t,this.debug=n,this.polygons=[],this.faces.list=[],this.debug&&console.log("Create convex for point set ( length "+t.length+" )"),!(this.pts.length<4)){for(h=[[0,1,2,3],3],u=h[0],this.idx=h[1];this.idx<this.pts.length;){for(this.idx++,this.center={},["x","y","z"].map(i),c=[],a=0,p=(h=[[0,1,2],[0,1,3],[0,2,3],[1,2,3]].map(r)).length;p>a;++a)d=h[a],c.push(new Voronoi.face(this,d));if(f=c,!f.filter(e).length)break;d=u.map(s).sort(o)[0][1],u.splice(u.indexOf(d),1),u.push(this.idx)}return this.faces.add(f),f.forEach(function(t){return l.pts.forEach(function(n){return t.front(n)?l.setPair(t,n):void 0})}),this}},import$(Convex.prototype,{pair:{f2p:{},p2f:{}},getPair:function(t){return t instanceof Voronoi.face?this.pair.f2p[this.faces.list.indexOf(t)]||[]:this.pair.p2f[this.pts.indexOf(t)]||[]},setPair:function(t,n){var i,r,e;return((i=(e=this.pair).f2p||(e.f2p={}))[r=this.faces.list.indexOf(t)]||(i[r]=[])).push(n),((i=(e=this.pair).p2f||(e.p2f={}))[r=this.pts.indexOf(n)]||(i[r]=[])).push(t)},faces:{list:[],contain:function(t){return in$(t,this.list)},add:function(t){return Array.isArray(t)?this.list=this.list.concat(t):this.list.push(t)},remove:function(t){var n=this;return Array.isArray(t)||(t=[t]),t.forEach(function(t){var i;return i=n.list.indexOf(t),i>=0?n.list.splice(i,1):void 0})}},polygonReorder:function(t){var n,i,r,e;return n=t.reduce(function(t,n){return t+n.x},0)/t.length,i=t.reduce(function(t,n){return t+n.y},0)/t.length,r=Math.pow(n,2)+Math.pow(i,2),e=function(t){var e,s,o;return e=Math.sqrt(r*(Math.pow(t.x-n,2)+Math.pow(t.y-i,2))),s=Math.acos((-n*(t.x-n)-i*(t.y-i))/e),o=Math.acos((i*(t.x-n)-n*(t.y-i))/e),o>Math.PI/2&&(s=6.28-s),s},t.sort(function(t,n){return e(t)-e(n)})},grid:function(){function t(t,n){return t+n.x}function n(t,n){return t+n.y}var i,r,e,s,o,h,u,f,c,a,p,d,l,x,g,v;for(this.polygons=[],i=0,e=(r=this.pts).length;e>i;++i)s=r[i],s.visited=!1;for(o=[],i=0,e=(r=this.faces.list).length;e>i;++i)if(h=r[i],u=h.center(),h.front({x:u.x,y:u.y,z:-100}))for(f=0,a=(c=h.idx).length;a>f;++f)if(s=c[f],!in$(s,o)){for(o.push(s),p=[],p.idx=s,d=0,x=(l=this.faces.list).length;x>d;++d)g=d,v=l[d],u=v.center(),v.front({x:u.x,y:u.y,z:-100})&&in$(s,v.idx)&&p.push(v.dual());this.polygonReorder(p),p.cx=p.reduce(t,0)/p.length,p.cy=p.reduce(n,0)/p.length,this.pts[s].boundary&&(p.boundary=!0),this.polygons.push(p)}return console.log(this.pts.length,"vs",this.polygons.length)},calculate:function(){for(;this.idx<this.pts.length;)this.iterate();return this.grid()},iterate:function(){function t(t){return t.node[0]===c.node[0]&&t.node[1]===c.node[1]}function n(t){return t.dup=!0,t}var i,r,e,s,o,h,u,f,c,a,p,d,l=this;if(!(this.idx>=this.pts.length)){for(this.faces.list.map(function(t){return t.active=!1}),this.pts[this.idx].active=!0,i=this.getPair(this.pts[this.idx]),r=[],e=0,s=0,o=i.length;o>s;++s)if(h=i[s],this.faces.contain(h))for(u=0;3>u;++u)f=u,e++,c={dup:!1,node:[h.idx[f],h.idx[(f+1)%3]]},c.node[0]>c.node[1]&&c.node.reverse(),a=r.filter(t).map(n),a.length||r.push(c);return p=r.filter(function(t){return!t.dup}).map(function(t){return t.node}),this.faces.remove(i),this.faces.add(d=function(){var t,n,i,r=[];for(t=0,i=(n=p).length;i>t;++t)c=n[t],r.push(new Voronoi.face(this,c.concat([this.idx]),!0));return r}.call(this)),d.forEach(function(t){return l.pts.forEach(function(n){return t.front(n)?l.setPair(t,n):void 0})}),this.idx++}}});function import$(t,s){var i={}.hasOwnProperty;for(var r in s)i.call(s,r)&&(t[r]=s[r]);return t}Voronoi.face=function(t,s,i){var r,n,u=this;return null==i&&(i=!1),this.convex=t,this.idx=s,this.active=i,this.pts=s.map(function(s){return t.pts[s]}),this.norm=Aux.cross(Aux.sub(this.pts[2],this.pts[0]),Aux.sub(this.pts[1],this.pts[0])),r=["x","y","z"].reduce(function(t,s){return t+Math.pow(u.norm[s],2)},0),this.norm={x:this.norm.x/r,y:this.norm.y/r,z:this.norm.z/r},this.front=function(t){return Aux.inner(this.norm,Aux.sub(t,this.pts[0]))>0},this.center=function(){var t,s=this;return t={x:0,y:0,z:0},this.pts.map(function(i){return t.x+=i.x/s.pts.length,t.y+=i.y/s.pts.length,t.z+=i.z/s.pts.length}),t},n=Aux.inner(this.norm,Aux.sub(t.center,this.pts[0])),n>0?(["x","y","z"].forEach(function(t){return u.norm[t]=-u.norm[t]}),this.pts.reverse(),this.idx.reverse()):0===n&&(this.trivial=!0),this},import$(Voronoi.face.prototype,{dual:function(){var t,s,i,r,n,u,h,e,o,a,p,x,c,l,f,m,v;return this.dual.value&&this.dual.value,t=this.pts[0],s=t.x,i=t.y,r=t.z,t=this.pts[1],n=t.x,u=t.y,h=t.z,t=this.pts[2],e=t.x,o=t.y,a=t.z,p=i*(h-a)+u*(a-r)+o*(r-h),x=r*(n-e)+h*(e-s)+a*(s-n),c=s*(u-o)+n*(o-i)+e*(i-u),l=s*(u*a-o*h)+n*(o*r-i*a)+e*(i*h-u*r),f=.5*-p/c,m=.5*-x/c,v=-l/c,this.dual.value={x:f,y:m,z:v},this.dual.value}});var Polygon;Voronoi.Polygon=Polygon={},Polygon.center=function(n){return n&&n.length?{x:n.reduce(function(n,e){return n+e.x},0)/n.length,y:n.reduce(function(n,e){return n+e.y},0)/n.length}:{x:0/0,y:0/0}},Polygon.area=function(n){var e,r,t,u;return function(){var o,l,y,g=[];for(o=0,l=n.length;l>o;++o)e=o,r=(e+1)%n.length,y=[n[e],n[r]],t=y[0],u=y[1],g.push(t.x*u.y-t.y*u.x);return g}().reduce(function(n,e){return n+e/2},0)},Polygon.intersect=function(n,e){function r(n,e){return n+e.x}function t(n,e){return n+e.y}function u(n){return n[0]>=0&&n[0]<=1}var o,l,y,g,h,c,i,f,x,d,s,a,P,p,v,J,N,O,S,w,V,b,j,k,m,q,z,A,B,C,D,E;for(o=!1,e=JSON.parse(JSON.stringify(e)),l=n.reduce(function(n,e){return n+e.x},0)/n.length,y=n.reduce(function(n,e){return n+e.y},0)/n.length,g=0,h=n.length;h>g;++g){for(c=g,i=n[c],f=n[(c+1)%n.length].x-n[c].x,x=n[(c+1)%n.length].y-n[c].y,d=e.reduce(r,0)/e.length,s=e.reduce(t,0)/e.length,P=[],p=0,v=e.length;v>p;++p)J=p,N=e[J],O=e[(J+1)%e.length].x-e[J].x,S=e[(J+1)%e.length].y-e[J].y,S*f-O*x===0?P.push([-1,J]):(w=((N.x-i.x)*x-(N.y-i.y)*f)/(S*f-O*x),V=[N.x+O*w,N.y+S*w],b=V[0],j=V[1],V=[f,x],k=V[0],m=V[1],V=[d-b,s-j],q=V[0],z=V[1],A=(-k*S+m*O)*(-q*S+z*O)>0,P.push([w,J,b,j,A]));if(a=P,a=a.filter(u),a.length<2){if((-(l-i.x)*x+(y-i.y)*f)*(-(d-i.x)*x+(s-i.y)*f)<0)return[]}else{V=a[0][4]?[a[0],a[1]]:[a[1],a[0]],B=V[0],C=V[1],D=[{x:B[2],y:B[3]},{x:C[2],y:C[3]}],E=C[1];do E=(E+1)%e.length,D.push(e[E]);while(E!==B[1]);e=D}}return e};var voronoi,Aux;voronoi={},Aux={inner:function(n,r){return["x","y","z"].map(function(u){return n[u]*r[u]}).reduce(function(n,r){return n+r},0)},sub:function(n,r){var u;return u={},["x","y","z"].map(function(o){return u[o]=n[o]-r[o]}),u},cross:function(n,r){return{x:n.y*r.z-n.z*r.y,y:n.z*r.x-n.x*r.z,z:n.x*r.y-n.y*r.x}}};