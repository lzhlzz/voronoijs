function import$(t,n){var r={}.hasOwnProperty;for(var i in n)r.call(n,i)&&(t[i]=n[i]);return t}function in$(t,n){for(var r=-1,i=n.length>>>0;++r<i;)if(t===n[r])return!0;return!1}var Aux;Aux={inner:function(t,n){return["x","y","z"].map(function(r){return t[r]*n[r]}).reduce(function(t,n){return t+n},0)},sub:function(t,n){var r;return r={},["x","y","z"].map(function(i){return r[i]=t[i]-n[i]}),r},cross:function(t,n){return{x:t.y*n.z-t.z*n.y,y:t.z*n.x-t.x*n.z,z:t.x*n.y-t.y*n.x}}},Voronoi.Convex=function(t,n){function r(t){return l.center[t]=[0,1,2,3].reduce(function(n,r){return n+l.pts[h[r]][t]},0)/4}function i(t){return t.map(function(t){return h[t]})}function e(t){return t.trivial}function s(t,n){var r;return r=Aux.sub(l.center,l.pts[t]),["x","y","z"].reduce(function(t,n){return t+Math.pow(r[n],2)},0),[r,n]}function o(t,n){return t[0]-n[0]}var u,h,f,c,a,p,d,l=this;if(this.pts=t,this.debug=n,this.polygons=[],this.faces.list=[],this.debug&&console.log("Create convex for point set ( length "+t.length+" )"),!(this.pts.length<4)){for(u=[[0,1,2,3],3],h=u[0],this.idx=u[1];this.idx<this.pts.length;){for(this.idx++,this.center={},["x","y","z"].map(r),c=[],a=0,p=(u=[[0,1,2],[0,1,3],[0,2,3],[1,2,3]].map(i)).length;p>a;++a)d=u[a],c.push(new Convex.face(this,d));if(f=c,!f.filter(e).length)break;d=h.map(s).sort(o)[0][1],h.splice(h.indexOf(d),1),h.push(this.idx)}return this.faces.add(f),f.forEach(function(t){return l.pts.forEach(function(n){return t.front(n)?l.setPair(t,n):void 0})}),this}},import$(Convex.prototype,{pair:{f2p:{},p2f:{}},getPair:function(t){return t instanceof Convex.face?this.pair.f2p[this.faces.list.indexOf(t)]||[]:this.pair.p2f[this.pts.indexOf(t)]||[]},setPair:function(t,n){var r,i,e;return((r=(e=this.pair).f2p||(e.f2p={}))[i=this.faces.list.indexOf(t)]||(r[i]=[])).push(n),((r=(e=this.pair).p2f||(e.p2f={}))[i=this.pts.indexOf(n)]||(r[i]=[])).push(t)},faces:{list:[],contain:function(t){return in$(t,this.list)},add:function(t){return Array.isArray(t)?this.list=this.list.concat(t):this.list.push(t)},remove:function(t){var n=this;return Array.isArray(t)||(t=[t]),t.forEach(function(t){var r;return r=n.list.indexOf(t),r>=0?n.list.splice(r,1):void 0})}},polygonReorder:function(t){var n,r,i,e;return n=t.reduce(function(t,n){return t+n.x},0)/t.length,r=t.reduce(function(t,n){return t+n.y},0)/t.length,i=Math.pow(n,2)+Math.pow(r,2),e=function(t){var e,s,o;return e=Math.sqrt(i*(Math.pow(t.x-n,2)+Math.pow(t.y-r,2))),s=Math.acos((-n*(t.x-n)-r*(t.y-r))/e),o=Math.acos((r*(t.x-n)-n*(t.y-r))/e),o>Math.PI/2&&(s=6.28-s),s},t.sort(function(t,n){return e(t)-e(n)})},grid:function(){function t(t,n){return t+n.x}function n(t,n){return t+n.y}var r,i,e,s,o,u,h,f,c,a,p,d,l,x,g,y;for(this.polygons=[],r=0,e=(i=this.pts).length;e>r;++r)s=i[r],s.visited=!1;for(o=[],r=0,e=(i=this.faces.list).length;e>r;++r)if(u=i[r],h=u.center(),u.front({x:h.x,y:h.y,z:-100}))for(f=0,a=(c=u.idx).length;a>f;++f)if(s=c[f],!in$(s,o)){for(o.push(s),p=[],p.idx=s,d=0,x=(l=this.faces.list).length;x>d;++d)g=d,y=l[d],h=y.center(),y.front({x:h.x,y:h.y,z:-100})&&in$(s,y.idx)&&p.push(y.dual());this.polygonReorder(p),p.cx=p.reduce(t,0)/p.length,p.cy=p.reduce(n,0)/p.length,this.pts[s].boundary&&(p.boundary=!0),this.polygons.push(p)}return console.log(this.pts.length,"vs",this.polygons.length)},calculate:function(){for(;this.idx<this.pts.length;)this.iterate();return this.grid()},iterate:function(){function t(t){return t.node[0]===c.node[0]&&t.node[1]===c.node[1]}function n(t){return t.dup=!0,t}var r,i,e,s,o,u,h,f,c,a,p,d,l=this;if(!(this.idx>=this.pts.length)){for(this.faces.list.map(function(t){return t.active=!1}),this.pts[this.idx].active=!0,r=this.getPair(this.pts[this.idx]),i=[],e=0,s=0,o=r.length;o>s;++s)if(u=r[s],this.faces.contain(u))for(h=0;3>h;++h)f=h,e++,c={dup:!1,node:[u.idx[f],u.idx[(f+1)%3]]},c.node[0]>c.node[1]&&c.node.reverse(),a=i.filter(t).map(n),a.length||i.push(c);return p=i.filter(function(t){return!t.dup}).map(function(t){return t.node}),this.faces.remove(r),this.faces.add(d=function(){var t,n,r,i=[];for(t=0,r=(n=p).length;r>t;++t)c=n[t],i.push(new Convex.face(this,c.concat([this.idx]),!0));return i}.call(this)),d.forEach(function(t){return l.pts.forEach(function(n){return t.front(n)?l.setPair(t,n):void 0})}),this.idx++}}});