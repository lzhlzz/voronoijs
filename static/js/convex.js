function import$(t,r){var n={}.hasOwnProperty;for(var i in r)n.call(r,i)&&(t[i]=r[i]);return t}function in$(t,r){for(var n=-1,i=r.length>>>0;++n<i;)if(t===r[n])return!0;return!1}Voronoi.Convex=function(t){function r(t){return l.center[t]=[0,1,2,3].reduce(function(r,n){return r+l.pts[u[n]][t]},0)/4}function n(t){return t.map(function(t){return u[t]})}function i(t){return t.trivial}function e(t,r){var n;return n=Aux.sub(l.center,l.pts[t]),["x","y","z"].reduce(function(t,r){return t+Math.pow(n[r],2)},0),[n,r]}function s(t,r){return t[0]-r[0]}var o,u,h,f,c,a,p,l=this;if(this.pts=t,this.polygons=[],this.edges={},this.pair={f2p:{},p2f:{}},this.faces.list=[],!(this.pts.length<4)){for(o=[[0,1,2,3],3],u=o[0],this.idx=o[1];this.idx<this.pts.length;){for(this.idx++,this.center={},["x","y","z"].map(r),f=[],c=0,a=(o=[[0,1,2],[0,1,3],[0,2,3],[1,2,3]].map(n)).length;a>c;++c)p=o[c],f.push(new Voronoi.face(this,p));if(h=f,!h.filter(i).length)break;p=u.map(e).sort(s)[0][1],u.splice(u.indexOf(p),1),u.push(this.idx)}return this.faces.add(h),h.forEach(function(t){return l.pts.forEach(function(r){return t.front(r)?l.setPair(t,r):void 0})}),this}},import$(Voronoi.Convex.prototype,{getPairByPtr:function(t){return this.pair.p2f[t]||[]},getPairByFace:function(t){return this.pair.f2p[t]||[]},setPair:function(t,r){var n,i,e;return((n=(e=this.pair).f2p||(e.f2p={}))[i=this.faces.list.indexOf(t)]||(n[i]=[])).push(r),((n=(e=this.pair).p2f||(e.p2f={}))[i=this.pts.indexOf(r)]||(n[i]=[])).push(t)},faces:{contain:function(t){return in$(t,this.list)},add:function(t){return Array.isArray(t)?this.list=this.list.concat(t):this.list.push(t)},remove:function(t){var r=this;return Array.isArray(t)||(t=[t]),t.forEach(function(t){var n;return n=r.list.indexOf(t),n>=0?r.list.splice(n,1):void 0})}},polygonReorder:function(t){var r,n,i,e;return r=t.reduce(function(t,r){return t+r.x},0)/t.length,n=t.reduce(function(t,r){return t+r.y},0)/t.length,i=Math.pow(r,2)+Math.pow(n,2),e=function(t){var e,s,o;return e=Math.sqrt(i*(Math.pow(t.x-r,2)+Math.pow(t.y-n,2))),s=Math.acos((-r*(t.x-r)-n*(t.y-n))/e),o=Math.acos((n*(t.x-r)-r*(t.y-n))/e),o>Math.PI/2&&(s=6.28-s),s},t.sort(function(t,r){return e(t)-e(r)})},grid:function(){function t(t,r){return t+r.x}function r(t,r){return t+r.y}var n,i,e,s,o,u,h,f,c,a,p,l,d,g,x,v,y=[];for(this.faces.list.forEach(function(t){return t.center=t.getCenter(),t}),this.faces.list=this.faces.list.filter(function(t){return!t.removed&&t.front(t.center)}),this.polygons=[],n=0,e=(i=this.pts).length;e>n;++n)s=i[n],s.visited=!1;for(o=[],n=0,e=(i=this.faces.list).length;e>n;++n){for(u=i[n],h=[],f=0,a=(c=u.idx).length;a>f;++f)if(s=c[f],!in$(s,o)){for(o.push(s),p=[],p.idx=s,l=0,g=(d=this.faces.list).length;g>l;++l)x=l,v=d[l],in$(s,v.idx)&&p.push(v.dual());this.polygonReorder(p),p.cx=p.reduce(t,0)/p.length,p.cy=p.reduce(r,0)/p.length,this.pts[s].boundary&&(p.boundary=!0),h.push(this.polygons.push(p))}y.push(h)}return y},calculate:function(){for(;this.idx<this.pts.length;)this.iterate();return this.grid()},iterate:function(){var t,r,n,i,e,s,o,u,h,f,c,a=this;if(!(this.idx>=this.pts.length)){for(t=this.getPairByPtr(this.idx),r=[],n=0,i=t.length;i>n;++n)if(e=t[n],!e.removed)for(s=0,u=(o=e.edges).length;u>s;++s)h=o[s],h.ref?h.dup=!0:r.push(h),h.ref++;return f=r.filter(function(t){return t.ref<2}),t.map(function(t){return t.removed=!0}),this.faces.add(c=function(){var t,r,n,i=[];for(t=0,n=(r=f).length;n>t;++t)h=r[t],i.push(new Voronoi.face(this,h.concat([this.idx]),!0));return i}.call(this)),c.forEach(function(t){return a.pts.forEach(function(r){return t.front(r)?a.setPair(t,r):void 0})}),this.idx++}}});