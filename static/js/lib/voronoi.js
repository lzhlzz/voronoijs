var Voronoi,Aux;Voronoi={},Aux={inner:function(t,o){return t.x*o.x+t.y*o.y+t.z*o.z},sub:function(t,o){return{x:t.x-o.x,y:t.y-o.y,z:t.z-o.z}},cross:function(t,o){return{x:t.y*o.z-t.z*o.y,y:t.z*o.x-t.x*o.z,z:t.x*o.y-t.y*o.x}}},Voronoi.Treemap=function(t,o,n,e,r){var i,h,s,a,u,c;for(null==r&&(r=0),this.root=t,this.omega=o,this.width=n,this.height=e,i=[],h=0,a=(s=t.children).length;a>h;++h)u=s[h],i.push((u.x=Math.random()*n,u.y=Math.random()*e,u.lv=r,u));for(this.sites=i,0===r&&this.normalizeValue(t,Polygon.area(o),this.correctValue(t)),this.boundmap=new Voronoi.Boundmap(this.sites,o,n,e,!0),this.boundmap.compute(),this.treemap=[],h=0,a=(s=t.children).length;a>h;++h)c=h,u=s[h],u.children&&this.treemap.push(new Voronoi.Treemap(u,this.boundmap.polygons[c],n,e,r+1));return this},Voronoi.Treemap.prototype={correctValue:function(t){var o,n,e,r;for(o=0,e=(n=t.children||[]).length;e>o;++o)r=n[o];return t.value=function(){var o,n,e,i=[];for(o=0,e=(n=t.children||[]).length;e>o;++o)r=n[o],i.push(this.correctValue(r));return i}.call(this).reduce(function(t,o){return t+o},0)||t.value||0,t.value},normalizeValue:function(t,o,n){var e,r,i,h,s=[];for(t.value=.05*t.value*o/n,e=0,i=(r=t.children||[]).length;i>e;++e)h=r[e],s.push(this.normalizeValue(h,o,n));return s},compute:function(){var t=this;return this.boundmap.compute(),this.treemap.forEach(function(o,n){return o.setOmega(t.boundmap.polygons[n]),o.compute()})},getSites:function(){var t;return[this.boundmap.sites].concat([function(){var o,n=[];for(o=0;4>o;++o)t=o,n.push({boundary:!0});return n}()],this.treemap.map(function(t){return t.getSites()})).reduce(function(t,o){return t.concat(o)},[])},getPolygons:function(){return[this.boundmap.polygons].concat(this.treemap.map(function(t){return t.getPolygons()})).reduce(function(t,o){return t.concat(o)},[])},setOmega:function(t){return this.omega=t,this.boundmap=new Voronoi.Boundmap(this.sites,t,this.width,this.height)}},Voronoi.Boundmap=function(t,o,n,e,r){var i,h;return this.sites=t,this.omega=o,this.width=n,this.height=e,null==r?(i=t.reduce(function(t,o){return t+o.value},0),h=Polygon.area(o),t.forEach(function(t){return t.nvalue=.1*t.value*h/i})):t.forEach(function(t){return t.nvalue=t.value}),t.forEach(function(t){return t.nvalue=t.value}),this.powerbox=new Voronoi.PowerDiagram(t,n,e),this.powerbox.compute(),this.clip(),this},Voronoi.randomSite=function(t,o,n,e){var r;return function(){var i,h,s=[];for(i=0,h=t;h>i;++i)r=i,s.push({x:o*Math.random(),y:n*Math.random(),value:1+Math.random()*e});return s}().map(function(t){return t.weight=t.value,t})},Voronoi.Boundmap.prototype={clip:function(){var t=this;return this.polygons=this.powerbox.convex.polygons.map(function(o){return o?Voronoi.Polygon.intersect(t.omega,o):[]}),this.centroids=this.polygons.map(function(t){return t?Voronoi.Polygon.centroid(t):{x:null,y:null}})},adoptPos:function(){var t,o,n,e,r,i,h,s,a,u,c,l,p,g,y,d=[];for(t={sites:this.sites,centroids:this.centroids,polygons:this.polygons},o=t.sites,n=t.centroids,e=t.polygons,r=0,i=n.length-4;i>r;++r)h=r,o[h]&&e[h]&&!o[h].boundary&&(e[h].length?(t=[n[h].x,n[h].y],o[h].x=t[0],o[h].y=t[1]):(t=[this.width*Math.random(),this.height*Math.random()],o[h].x=t[0],o[h].y=t[1]));for(r=0,i=n.length-4;i>r;++r)if(h=r,o[h]&&e[h].length&&!o[h].boundary){for(t=[Math.sqrt(o[h].weight),-1],s=t[0],a=t[1],u=0,c=e[h].length;c>u;++u)l=u,t=[e[h][l],e[h][(l+1)%e[h].length]],p=t[0],g=t[1],y=10*Math.abs(((g.y-p.y)*o[h].x-(g.x-p.x)*o[h].y+g.x*p.y-g.y*p.x)/Math.sqrt(Math.pow(g.y-p.y,2)+Math.pow(g.x-p.x,2))),(-1===a||a>y)&&(a=y);s=Math.pow(Math.min(s,a),2),d.push(o[h].weight=s)}return d},resetWeight:function(){return this.sites.forEach(function(t){return t.weight=t.pvalue=t.nvalue})},adoptWeight:function(){var t,o,n,e,r,i,h,s,a,u,c,l,p,g,y,d,m,f,v=[];for(t={sites:this.sites,centroids:this.centroids,polygons:this.polygons},o=t.sites,n=t.centroids,e=t.polygons,r=0,o.forEach(function(t){return r+=t.nvalue,t.pvalue!==t.nvalue&&(t.weight=t.nvalue),t.pvalue=t.nvalue}),i=Voronoi.Polygon.area(this.omega),h=0,s=n.length-4;s>h;++h)if(a=h,o[a]&&e[a].length&&!o[a].boundary){for(u=i*o[a].nvalue/r,c=Polygon.area(e[a]),l=Math.sqrt(o[a].weight),p=Math.sqrt(o[a].weight)*u/c,l=.5*(p-l)+l,g=-1,y=0,d=n.length-4;d>y;++y)m=y,a!==m&&this.polygons[m]&&(f=Math.sqrt(Math.pow(n[m].x-o[a].x,2)+Math.pow(n[m].y-o[a].y,2)),isNaN(f)||(-1===g||g>f)&&(g=f));l=Math.pow(Math.min(l,g),2),l<this.powerbox.epsilon&&(l=this.powerbox.epsilon),v.push(o[a].weight=l)}return v},compute:function(){return this.adoptPos(),this.powerbox=new Voronoi.PowerDiagram(this.sites,this.width,this.height),this.powerbox.compute(),this.clip(),this.adoptWeight(),this.powerbox=new Voronoi.PowerDiagram(this.sites,this.width,this.height),this.powerbox.compute(),this.clip()}},Voronoi.PowerDiagram=function(t,o,n){var e=this;return this.sites=t,this.width=o,this.height=n,this.boundary=[{x:-o,y:-n,boundary:!0},{x:-o,y:2*n,boundary:!0},{x:2*o,y:-n,boundary:!0},{x:2*o,y:2*n,boundary:!0}].map(function(t){return t.boundary=!0,t.weight=e.epsilon,t.value=e.epsilon,t}),this.convex=new Voronoi.Convex(JSON.parse(JSON.stringify(t.concat(this.boundary)))),this},Voronoi.PowerDiagram.prototype={epsilon:1e-10,compute:function(){return this.convex.calculate()}};